<?php
/**
 * @file
 * Code for the VIH Short Course Sport feature.
 */

include_once 'vih_short_course_sport.features.inc';

/**
 * Implements hook_migrate_api().
 */
function vih_short_course_sport_migrate_api() {
  $api = array(
    'api' => 2,
    'migrations' => array(
      'VIHShortCourseSportProduct' => array('class_name' => 'VIHShortCourseSportProduct'),
      //'VIHShortCourseSportExtraProduct' => array('class_name' => 'VIHShortCourseSportExtraProduct'),
      'VIHShortCourseSportNode' => array('class_name' => 'VIHShortCourseSportNode'),
    ),
  );

  return $api;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add our "Additional Product Data" field option to Commerce Cart's form settings.
 */
function vih_short_course_sport_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  // Extract the instance info from the form.
  $instance = $form['#instance'];

  // If the current field instance is not locked and is attached to a product
  // line item type...
  // @todo: depcreated for product type fields vs actual line item fields
  if (empty($form['locked']) && $instance['entity_type'] == 'commerce_line_item' &&
    in_array($instance['bundle'], commerce_product_line_item_types())) {

    // Add our extra option to the existing options.
    $form['instance']['commerce_cart_settings']['additional_products_field_access'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use this field as a modifier for Commerce Additional Products'),
      '#default_value' => isset($instance['commerce_cart_settings']['additional_products_field_access']) ? $instance['commerce_cart_settings']['additional_products_field_access'] : FALSE,
    );
  }
  // If the current field instance is not locked and is attached to  product
  // display node...
  if (empty($form['locked']) && $form['#field']['type'] == 'commerce_product_reference') {
    $form['instance']['settings']['additional_products_provider'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use this field to provide additional products that can be optionally added with the course.'),
      '#default_value' => isset($instance['settings']['additional_products_provider']) ? $instance['settings']['additional_products_provider'] : FALSE,
      '#weight' => -8,
    );
  }
  // If the current field instance is not locked, provides multiple textfield values
  if (empty($form['locked']) && $form['#field']['type'] == 'text' && $form['#field']['cardinality'] != 1) {
    $form['instance']['settings']['additional_products_options'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use this field to provide extra options via key|value'),
      '#default_value' => isset($instance['settings']['additional_products_options']) ? $instance['settings']['additional_products_options'] : FALSE,
      '#weight' => -1,
    );
  }
}

/**
 * Implementation of hook_form_FORMID_alter().
 *
 * Attaches the additional products and attributes to the Add to Cart form.
 */
function vih_short_course_sport_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {
  // Initialize empty arrays we'll use later.
  $attached_additional_products_field = NULL;
  $attached_additional_products = array();
  $attached_additional_attributes = array();

  // Load the entity information of the product display
  $entity_type = $form_state['context']['entity_type'];
  $entity_id = $form_state['context']['entity_id'];

  // Create entity wrapper of the product display
  $product_display_entity = entity_load($entity_type, array($entity_id));
  $product_display_entity = reset($product_display_entity); // 5.5+ throws a reference error if entity_load() called within.
  $product_display_wrapper = entity_metadata_wrapper($entity_type, $product_display_entity);

  $attached_extra_options_field = _vih_short_course_sport_extra_options_field($product_display_wrapper);

  // If the extra options field is set, attach to the form.
  if ($attached_extra_options_field) {
    _vih_short_course_sport_attach_extra_options_form($form, $product_display_wrapper, $attached_extra_options_field);
  }

  $attached_additional_products_field = _vih_short_course_sport_additional_products_field($product_display_wrapper);

  // If the additional products field is set, attached them to form.
  if ($attached_additional_products_field) {
    _vih_short_course_sport_attach_additional_products_form($form, $product_display_wrapper, $attached_additional_products_field);
  }


  // Add custom submit handler to work with our custom form data!
  $form['#submit'][] = 'vih_short_course_sport_add_to_cart_form_submit';
}

/**
 * Submit handler
 * @todo : Provide proper translation on product options
 * @todo : comment code
 * @todo : clean this up.
 */
function vih_short_course_sport_add_to_cart_form_submit($form, &$form_state) {
  // Check if additional products were added
  if (isset($form_state['values']['additional_products_option'])
      && is_numeric($form_state['values']['additional_products_option'])) {

    // Create new line item and add it to the cart.
    if ($product = commerce_product_load((int) $form_state['values']['additional_products_option'])) {
      // Create some details about the line itme
      $line_item_quantity = $form_state['values']['quantity'];
      $line_item_order_id = $form_state['line_item']->order_id;
      $line_item_data = array();
      $line_item_type = $form_state['line_item']->type;

      // Generate & save line item object
      $line_item = commerce_product_line_item_new($product, $line_item_quantity, $line_item_order_id, $line_item_data, $line_item_type);
      commerce_line_item_save($line_item);

      // Create a place to store additional products
      $line_item->data['additional_products'] = array();

      // Add additional products info into data store.
      // @note: this assumes only one additional product can be added. (radio form element)
      $attribute_fields = element_children($form['additional_products'][$product->product_id]);
      foreach ($attribute_fields as $key => $field_name) {
        $line_item->data['additional_products'][$field_name] = $form_state['values'][$field_name][0]['value'];
      }

      $line_item = commerce_line_item_load($line_item->line_item_id);
      // Add line item to cart, use uid saved in form state.
      $line_item = commerce_cart_product_add($form_state['values']['uid'], $line_item, FALSE);
    }
  }
}

/**
 * Helper function to check if line item field should be attached as a additional
 * product attribute.
 */
function vih_short_course_sport_sport_field_access($field) {
  if (isset($field['#commerce_cart_settings']) && isset($field['#commerce_cart_settings']['additional_products_field_access'])) {
    if ($field['#commerce_cart_settings']['additional_products_field_access']) {
      return TRUE;
    }
  }
  return FALSE;
}

function _vih_short_course_sport_attach_extra_options_form(&$form, $product_display_wrapper, $attached_extra_options_field) {
  // Make sure we have values before moving forward
  // @note: do we need to check individual values since field cardinality != 1?
  $extra_options = $product_display_wrapper->$attached_extra_options_field->value();

  if (!$extra_options) {
    // We have field but no values
    return;
  }

  foreach ($extra_options as $key => $extra_option) {
    dpm($extra_option);
  }

}

function _vih_short_course_sport_attach_additional_products_form(&$form, $product_display_wrapper, $attached_additional_products_field) {
  // Make sure we have values before moving forward
  $additional_products = $product_display_wrapper->$attached_additional_products_field->value();

  if (!$additional_products) {
    // We have field but no values
    return;
  }

  // To accomodate single value and multi value, wrap single value fields in an array
  if (is_object($additional_products)) {
    $additional_products = array($additional_products);
  }

  if ($additional_products) {
    // We only need to attach the product ID and titles for the form
    foreach ($additional_products as $key => $commerce_product) {
      // Allows us to create a radio list of options based by product ID
      $attached_additional_products[$commerce_product->product_id] = _vih_short_course_sport_additional_product_display_title($commerce_product);

      // Add the products atributes fields for later.
      // @note: this is referencing custom line items. Just load the product type's fields.
      foreach (element_children($form['line_item_fields']) as $field_name) {
        // Check if the field had the proper setting enabled for it to be added.
        $allowed = vih_short_course_sport_field_access($form['line_item_fields'][$field_name]);
        if ($allowed) {
          // Add the field to the array of fields to be parsed
          $attached_additional_attributes[$commerce_product->product_id][$field_name] = $form['line_item_fields'][$field_name];
        }
      }
    }
  }
    // If we end up with additional products to attach, do it now.
    if ($attached_additional_products) {
      // Create the options array for secondary products.
      $options = array(
        '_none' => 'None',
      );
      $options += $attached_additional_products;

      // Start building form
      $form['additional_products'] = array(
        '#type' => 'container',
        '#weight' => 50,
      );
      $form['additional_products']['additional_products_option'] = array(
        '#type' => 'radios',
        '#title' => t('Additional products'),
        '#options' => $options,
        '#default_value' => '_none',
        '#weight'=> 30,
      );
      // Inject the product attributes.
      foreach ($attached_additional_products as $product_id => $display_title) {
        if (isset($attached_additional_attributes[$product_id])) {

          // We make a container for each product's field options
          // @note: This is unneeded since all products share line item type
          //        but end goal is to support different attributes per product.
          $form['additional_products'][$product_id] = array(
            '#type' => 'container',
            '#weight' => 40,
            '#states' => array(
              'visible' => array(
                ':input[name=additional_products_option]' => array('value' => $product_id),
              ),
            ),
          );
          // Add each field to the container
          foreach ($attached_additional_attributes[$product_id] as $field_name => $element) {
            $form['additional_products'][$product_id][$field_name] = $element[LANGUAGE_NONE];
          }
        }
      }
    }
}

/**
 * Helper function to identify if providing additional products
 * @param  entity_wrapper $node_wrapper
 * @return string
 */
function _vih_short_course_sport_additional_products_field($node_wrapper) {
  // Discover if there is a secondary product reference field that provides
  // additional products.
  return _vih_short_course_sport_get_field_instance_details($node_wrapper, 'additional_products_provider');
}

/**
 * Helper function to identify if providing additional products
 * @param  entity_wrapper $node_wrapper
 * @return string
 */
function _vih_short_course_sport_extra_options_field($node_wrapper) {
  // Discover if there is a secondary product reference field that provides
  // additional products.
  return _vih_short_course_sport_get_field_instance_details($node_wrapper, 'additional_products_options');
}

/**
 * Helper function that displays an additional product's title and price
 */
function _vih_short_course_sport_additional_product_display_title($commerce_product) {
  $commerce_product_price = commerce_product_calculate_sell_price($commerce_product);
  $price = ' (' . commerce_currency_format($commerce_product_price['amount'], $commerce_product_price['currency_code']) . ')';
  return  $commerce_product->title . $price;
}

/**
 * Helper function for helper functions to check a field setting and return the field.
 * @param  entity_wrapper $node_wrapper
 * @param  string $instance_setting
 * @return string
 */
function _vih_short_course_sport_get_field_instance_details($product_display_wrapper, $instance_setting) {
  // Discover if there is a field that has provided setting
  foreach ($product_display_wrapper->getPropertyInfo() as $property => $property_data) {
    if (isset($property_data['type']) && $property_data['type'] == 'commerce_product') {
      $field_instance = field_info_instance($entity_type, $property, $product_display_entity->type);
      $field_instance_settings = $field_instance['settings'];
      if (isset($field_instance_settings[$instance_setting])
          && $field_instance_settings[$instance_setting]) {
        return $property;
      }
    }
  }
  // Default to NULL
  return NULL;
}
